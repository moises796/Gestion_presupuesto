
@{
    ViewBag.Title = "Vobo";
}

@Html.DevExpress().GetStyleSheets(
    new StyleSheet { ExtensionSuite = ExtensionSuite.NavigationAndLayout },
    new StyleSheet { ExtensionSuite = ExtensionSuite.Editors },
    new StyleSheet { ExtensionSuite = ExtensionSuite.GridView }
)
@Html.DevExpress().GetScripts(
    new Script { ExtensionSuite = ExtensionSuite.NavigationAndLayout },
    new Script { ExtensionSuite = ExtensionSuite.Editors },
    new Script { ExtensionSuite = ExtensionSuite.GridView }
)


@Html.DevExpress().FloatingActionButton(settings =>
{

    settings.Name = "fab";
    settings.ContainerElementID = "contentt";
    settings.InitialActionContext = "NewRowContext";
    settings.HorizontalMargin = 35;
    settings.VerticalMargin = 40;
    settings.ClientSideEvents.ActionItemClick = "function(s,e){OnActionItemClick(s,e);}";
    settings.ClientSideEvents.ActionCollapsing = "function(s,e){OnActionCollapsing(s,e);}";

    settings.VerticalPosition = FloatingActionButtonVerticalPosition.Top;
    settings.HorizontalPosition = FloatingActionButtonHorizontalPosition.Right;
    //settings.Items.Add(new FABAction("NewRowContext", "Agregar", "Nueva solicitud"));
    settings.Items.Add(new FABAction("CancelContext", "Cancelar", "Cancelar"));

    FABActionGroup focusedRowContext = new FABActionGroup() { ContextName = "ClickTabla" };
    focusedRowContext.Text = "Acciones";
    settings.Items.Add(focusedRowContext);

    focusedRowContext.Items.Add(new FABActionItem("Editar", Url.Content("~/Content/gridImg/edit2.svg"), "Editar"));
    focusedRowContext.Items.Add(new FABActionItem("Observar", Url.Content("~/Content/gridImg/send.svg"), "Observar"));
    focusedRowContext.Items.Add(new FABActionItem("Aprobar", Url.Content("~/Content/gridImg/doc.svg"), "Aprobar"));

}).GetHtml()

<center>
    <h1 class="animated fadeInUp encabezado mt-2">Bandeja V°. b°.</h1>
</center>

<div class="card border-0 rounded-4 shadow-sm p-1 p-sm-2 p-md-3 p-lg-5 ">
    <div class="d-flex justify-content-between align-items-start mb-3">
        @Html.Action("GridVobo", "Vobo")

    </div>
</div>


<script>
    //FLOATING
    function OnActionItemClick(s, e) {
        //alert(e.actionName);
        if (e.actionName === "Editar") {
            var index = GridVobo.GetFocusedRowIndex();
            console.log(index);
            GridVobo.StartEditRow(index);
        } else if (e.actionName === "Observar") {
            var index = GridVobo.GetFocusedRowIndex();
            var data = GridVobo.GetRowKey(index);
            var datos = data.split('|');
            Swal.fire({
                title: "¿Está seguro?",
                text: "Al observar la solicitud reiniciará su flujo",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Sí",
                cancelButtonText : "No"
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire({
                        title: "Observaciones",
                        input: "textarea",
                        inputPlaceholder: "Máx. 300 caracteres",
                        inputAttributes: { maxlength: 300, "aria-label": "Observaciones" },
                        inputValidator: (val) => {
                            if (!val || !val.trim()) return "Este campo es obligatorio";
                        },
                        showCancelButton: true,
                        confirmButtonText: "Guardar"
                    }).then((r) => {
                        if (r.isConfirmed) {
                            $.ajax({
                                type: "POST",
                                url: "@Url.Content("~/Vobo/Observar")",
                                data: {
                                    id_vobo: datos[1],
                                    id_detalle_presupuesto: datos[0],
                                    instruccion: r.value.trim()
                                }
                            }).done(function (resp) {
                                if (resp.data == 1) {
                                    Swal.fire("Listo", "Comentario enviado", "success");
                                    GridVobo.PerformCallback();
                                } else {
                                    swal("¡Importante!", "Únicamente el empleado que elaboró o remite la correspondencia están autorizados", "info");
                                }
                            });
                        }
                    });

                }
            });


        }
        else if (e.actionName === "Aprobar") {
            var index = GridVobo.GetFocusedRowIndex();
            var data = GridVobo.GetRowKey(index);
            var datos = data.split('|');
            console.log(data);

            Swal.fire({
                title: "¿Está seguro?",
                text: "Al aprobar estará dando su visto bueno a la solicitud",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Sí",
                cancelButtonText: "No"
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: "POST",
                        url: "@Url.Content("~/Vobo/Aprobar")",
                        data: "id_vobo=" + datos[1]
                    }).done(function (resp) {
                        if (resp.data == 1) {
                            Swal.fire("Listo", "La solicitud ya cuenta con su visto bueno", "success");
                        } else {
                            swal("¡Importante!", "Únicamente el empleado que elaboró o remite la correspondencia están autorizados", "info");
                        }
                    });
                }
            });
            
        }
    }

    function OnInit(s, e) {
        //s.SetFocusedRowIndex(-1);
    }
    function OnRowClick(s, e) {
        if (s.IsNewRowEditing() || s.IsEditing()) {
            e.cancel = true;
        }
        else {
            var index = e.visibleIndex;
            var data = s.GetRowKey(index);

            //console.log(datos[14]);
            //alert(datos[14]);
            //if (datos[14] == "1") {
            fab.SetActionContext("ClickTabla", true);
            //} else {
            //    fab.SetActionContext("ClickTablaNI", true);
            //}
            //console.log(s);
            //console.log(e);

        }

    }
    function OnActionCollapsing(s, e) {
        //alert(e.contextName);

        if (e.contextName === "ClickTabla") {
            s.ExpandActionGroupItems();
        }
        var isRowActionContext = e.contextName === "ClickTabla" || e.contextName === "FocusedRowContext";
        var isCollapsedByButton = e.collapseReason === ASPxClientFloatingActionButtonCollapseReason.CollapseButton;
        if (isRowActionContext && isCollapsedByButton) {
            setTimeout(function () {
                GridVobo.CancelEdit();
                //GridViewAmumas.SetFocusedRowIndex(-1);
                fab.SetActionContext("NewRowContext");
            }, 100);
        }


        if (e.contextName === "ClickTablaNI") {
            s.ExpandActionGroupItems();
        }
        var isRowActionContext = e.contextName === "ClickTablaNI" || e.contextName === "FocusedRowContext";
        var isCollapsedByButton = e.collapseReason === ASPxClientFloatingActionButtonCollapseReason.CollapseButton;
        if (isRowActionContext && isCollapsedByButton) {
            setTimeout(function () {
                GridVobo.CancelEdit();
                //GridViewAmumas.SetFocusedRowIndex(-1);
                fab.SetActionContext("NewRowContext");
            }, 100);
        }
    }
</script>






@*@Html.Action("GridListadoVobo", "Vobo")*@

